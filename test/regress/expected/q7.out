select query from tpch_queries(7); \gset
                           query                           
-----------------------------------------------------------
 SELECT                                                   +
     supp_nation,                                         +
     cust_nation,                                         +
     l_year,                                              +
     sum(volume) AS revenue                               +
 FROM (                                                   +
     SELECT                                               +
         n1.n_name AS supp_nation,                        +
         n2.n_name AS cust_nation,                        +
         extract(year FROM l_shipdate) AS l_year,         +
         l_extendedprice * (1 - l_discount) AS volume     +
     FROM                                                 +
         supplier,                                        +
         lineitem,                                        +
         orders,                                          +
         customer,                                        +
         nation n1,                                       +
         nation n2                                        +
     WHERE                                                +
         s_suppkey = l_suppkey                            +
         AND o_orderkey = l_orderkey                      +
         AND c_custkey = o_custkey                        +
         AND s_nationkey = n1.n_nationkey                 +
         AND c_nationkey = n2.n_nationkey                 +
         AND ((n1.n_name = 'FRANCE'                       +
                 AND n2.n_name = 'GERMANY')               +
             OR (n1.n_name = 'GERMANY'                    +
                 AND n2.n_name = 'FRANCE'))               +
         AND l_shipdate BETWEEN CAST('1995-01-01' AS date)+
         AND CAST('1996-12-31' AS date)) AS shipping      +
 GROUP BY                                                 +
     supp_nation,                                         +
     cust_nation,                                         +
     l_year                                               +
 ORDER BY                                                 +
     supp_nation,                                         +
     cust_nation,                                         +
     l_year;                                              +
 
(1 row)

select transform_query(query) from tpch_queries(7);
                                                        transform_query                                                         
--------------------------------------------------------------------------------------------------------------------------------
 LogicalGbAgg: group: n_name#41, n_name#45, l_year#48, agg: Pj(revenue sum(volume))                                            +
 └── LogicalProject: Pj(l_year (6199 Constant l_shipdate)), Pj(volume (1760 l_extendedprice (1759 (1740 Constant) l_discount)))+
     └── LogicalJoin: INNER                                                                                                    +
         ├── LogicalJoin: INNER                                                                                                +
         │   ├── LogicalJoin: INNER                                                                                            +
         │   │   ├── LogicalJoin: INNER                                                                                        +
         │   │   │   ├── LogicalJoin: INNER                                                                                    +
         │   │   │   │   ├── LogicalGet: supplier                                                                              +
         │   │   │   │   └── LogicalGet: lineitem                                                                              +
         │   │   │   └── LogicalGet: orders                                                                                    +
         │   │   └── LogicalGet: customer                                                                                      +
         │   └── LogicalGet: n1                                                                                                +
         └── LogicalGet: n2                                                                                                    +
 
(1 row)

set pg_planner.enable_planner to on;
explain verbose :query
                                                                                                          QUERY PLAN                                                                                                           
-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=0.00..100.00 rows=1000 width=8)
   Output: n1.n_name, n2.n_name, ("extract"('year'::text, lineitem.l_shipdate)), sum(((lineitem.l_extendedprice * ("numeric"(1) - lineitem.l_discount))))
   Group Key: n1.n_name, n2.n_name, ("extract"('year'::text, lineitem.l_shipdate))
   ->  Sort  (cost=0.00..100.00 rows=1000 width=8)
         Output: ("extract"('year'::text, lineitem.l_shipdate)), ((lineitem.l_extendedprice * ("numeric"(1) - lineitem.l_discount))), n1.n_name, n2.n_name
         Sort Key: n1.n_name, n2.n_name, ("extract"('year'::text, lineitem.l_shipdate))
         ->  Result  (cost=0.00..100.00 rows=1000 width=8)
               Output: "extract"('year'::text, lineitem.l_shipdate), (lineitem.l_extendedprice * ("numeric"(1) - lineitem.l_discount)), n1.n_name, n2.n_name
               ->  Nested Loop  (cost=0.00..100.00 rows=1000 width=8)
                     Output: n2.n_name, lineitem.l_shipdate, lineitem.l_extendedprice, n1.n_name, lineitem.l_discount
                     Join Filter: ((customer.c_nationkey = n2.n_nationkey) AND (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar))))
                     ->  Nested Loop  (cost=0.00..100.00 rows=1000 width=8)
                           Output: lineitem.l_discount, n1.n_name, lineitem.l_extendedprice, lineitem.l_shipdate, customer.c_nationkey
                           Join Filter: (supplier.s_nationkey = n1.n_nationkey)
                           ->  Nested Loop  (cost=0.00..100.00 rows=1000 width=8)
                                 Output: customer.c_nationkey, lineitem.l_shipdate, lineitem.l_extendedprice, lineitem.l_discount, supplier.s_nationkey
                                 Join Filter: (customer.c_custkey = orders.o_custkey)
                                 ->  Nested Loop  (cost=0.00..100.00 rows=1000 width=8)
                                       Output: supplier.s_nationkey, lineitem.l_discount, lineitem.l_extendedprice, lineitem.l_shipdate, orders.o_custkey
                                       Join Filter: (orders.o_orderkey = lineitem.l_orderkey)
                                       ->  Nested Loop  (cost=0.00..100.00 rows=1000 width=8)
                                             Output: lineitem.l_shipdate, lineitem.l_extendedprice, lineitem.l_discount, supplier.s_nationkey, lineitem.l_orderkey
                                             Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
                                             ->  Seq Scan on public.supplier  (cost=0.00..100.00 rows=1000 width=8)
                                                   Output: supplier.s_nationkey, supplier.s_suppkey
                                             ->  Seq Scan on public.lineitem  (cost=0.00..100.00 rows=1000 width=8)
                                                   Output: lineitem.l_suppkey, lineitem.l_shipdate, lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_orderkey
                                                   Filter: ((lineitem.l_shipdate >= '01-01-1995'::date) AND (lineitem.l_shipdate <= '12-31-1996'::date))
                                       ->  Seq Scan on public.orders  (cost=0.00..100.00 rows=1000 width=8)
                                             Output: orders.o_orderkey, orders.o_custkey
                                 ->  Seq Scan on public.customer  (cost=0.00..100.00 rows=1000 width=8)
                                       Output: customer.c_custkey, customer.c_nationkey
                           ->  Seq Scan on public.nation n1  (cost=0.00..100.00 rows=1000 width=8)
                                 Output: n1.n_nationkey, n1.n_name
                     ->  Seq Scan on public.nation n2  (cost=0.00..100.00 rows=1000 width=8)
                           Output: n2.n_nationkey, n2.n_name
 Optimizer: PGP
(37 rows)

:query
 supp_nation | cust_nation | l_year | revenue 
-------------+-------------+--------+---------
(0 rows)

set pg_planner.enable_planner to off;
explain verbose :query
                                                                                                                                                                                                   QUERY PLAN                                                                                                                                                                                                   
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=26.23..26.27 rows=1 width=272)
   Output: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate)), sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))
   Group Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
   ->  Sort  (cost=26.23..26.24 rows=1 width=276)
         Output: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate)), lineitem.l_extendedprice, lineitem.l_discount
         Sort Key: n1.n_name, n2.n_name, (EXTRACT(year FROM lineitem.l_shipdate))
         ->  Nested Loop  (cost=0.87..26.22 rows=1 width=276)
               Output: n1.n_name, n2.n_name, EXTRACT(year FROM lineitem.l_shipdate), lineitem.l_extendedprice, lineitem.l_discount
               Inner Unique: true
               Join Filter: (((n1.n_name = 'FRANCE'::bpchar) AND (n2.n_name = 'GERMANY'::bpchar)) OR ((n1.n_name = 'GERMANY'::bpchar) AND (n2.n_name = 'FRANCE'::bpchar)))
               ->  Nested Loop  (cost=0.72..25.72 rows=1 width=148)
                     Output: lineitem.l_shipdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_nationkey, n1.n_name
                     Inner Unique: true
                     ->  Nested Loop  (cost=0.58..25.05 rows=1 width=48)
                           Output: supplier.s_nationkey, lineitem.l_shipdate, lineitem.l_extendedprice, lineitem.l_discount, customer.c_nationkey
                           Inner Unique: true
                           ->  Nested Loop  (cost=0.43..24.67 rows=1 width=48)
                                 Output: supplier.s_nationkey, lineitem.l_shipdate, lineitem.l_extendedprice, lineitem.l_discount, orders.o_custkey
                                 Inner Unique: true
                                 ->  Nested Loop  (cost=0.29..16.43 rows=1 width=48)
                                       Output: supplier.s_nationkey, lineitem.l_shipdate, lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_orderkey
                                       Inner Unique: true
                                       ->  Index Scan using idx_lineitem_shipdate on public.lineitem  (cost=0.14..8.16 rows=1 width=48)
                                             Output: lineitem.l_orderkey, lineitem.l_partkey, lineitem.l_suppkey, lineitem.l_linenumber, lineitem.l_quantity, lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_tax, lineitem.l_returnflag, lineitem.l_linestatus, lineitem.l_shipdate, lineitem.l_commitdate, lineitem.l_receiptdate, lineitem.l_shipinstruct, lineitem.l_shipmode, lineitem.l_comment
                                             Index Cond: ((lineitem.l_shipdate >= '01-01-1995'::date) AND (lineitem.l_shipdate <= '12-31-1996'::date))
                                       ->  Index Scan using supplier_pkey on public.supplier  (cost=0.14..8.16 rows=1 width=8)
                                             Output: supplier.s_suppkey, supplier.s_name, supplier.s_address, supplier.s_nationkey, supplier.s_phone, supplier.s_acctbal, supplier.s_comment
                                             Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
                                 ->  Index Scan using orders_pkey on public.orders  (cost=0.14..8.16 rows=1 width=8)
                                       Output: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
                                       Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
                           ->  Index Scan using customer_pkey on public.customer  (cost=0.14..0.37 rows=1 width=8)
                                 Output: customer.c_custkey, customer.c_name, customer.c_address, customer.c_nationkey, customer.c_phone, customer.c_acctbal, customer.c_mktsegment, customer.c_comment
                                 Index Cond: (customer.c_custkey = orders.o_custkey)
                     ->  Index Scan using nation_pkey on public.nation n1  (cost=0.14..0.46 rows=1 width=108)
                           Output: n1.n_nationkey, n1.n_name, n1.n_regionkey, n1.n_comment
                           Index Cond: (n1.n_nationkey = supplier.s_nationkey)
                           Filter: ((n1.n_name = 'FRANCE'::bpchar) OR (n1.n_name = 'GERMANY'::bpchar))
               ->  Index Scan using nation_pkey on public.nation n2  (cost=0.14..0.48 rows=1 width=108)
                     Output: n2.n_nationkey, n2.n_name, n2.n_regionkey, n2.n_comment
                     Index Cond: (n2.n_nationkey = customer.c_nationkey)
                     Filter: ((n2.n_name = 'GERMANY'::bpchar) OR (n2.n_name = 'FRANCE'::bpchar))
(42 rows)

:query
 supp_nation | cust_nation | l_year | revenue 
-------------+-------------+--------+---------
(0 rows)

