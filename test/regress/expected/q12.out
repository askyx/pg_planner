select query from tpch_queries(12); \gset
                        query                        
-----------------------------------------------------
 SELECT                                             +
     l_shipmode,                                    +
     sum(                                           +
         CASE WHEN o_orderpriority = '1-URGENT'     +
             OR o_orderpriority = '2-HIGH' THEN     +
             1                                      +
         ELSE                                       +
             0                                      +
         END) AS high_line_count,                   +
     sum(                                           +
         CASE WHEN o_orderpriority <> '1-URGENT'    +
             AND o_orderpriority <> '2-HIGH' THEN   +
             1                                      +
         ELSE                                       +
             0                                      +
         END) AS low_line_count                     +
 FROM                                               +
     orders,                                        +
     lineitem                                       +
 WHERE                                              +
     o_orderkey = l_orderkey                        +
     AND l_shipmode IN ('MAIL', 'SHIP')             +
     AND l_commitdate < l_receiptdate               +
     AND l_shipdate < l_commitdate                  +
     AND l_receiptdate >= CAST('1994-01-01' AS date)+
     AND l_receiptdate < CAST('1995-01-01' AS date) +
 GROUP BY                                           +
     l_shipmode                                     +
 ORDER BY                                           +
     l_shipmode;                                    +
 
(1 row)

select transform_query(query) from tpch_queries(12);
    transform_query     
------------------------
 LogicalGbAgg          +
 └── LogicalJoin: INNER+
     ├── LogicalGet    +
     └── LogicalGet    +
 
(1 row)

set pg_planner.enable_planner to on;
explain verbose :query
                                                                                                                                             QUERY PLAN                                                                                                                                             
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=0.00..100.00 rows=1000 width=8)
   Output: lineitem.l_shipmode, sum(CASE WHEN ((orders.o_orderpriority = '1-URGENT'::bpchar) OR (orders.o_orderpriority = '2-HIGH'::bpchar)) THEN 1 ELSE 0 END), sum(CASE WHEN ((orders.o_orderpriority <> '1-URGENT'::bpchar) AND (orders.o_orderpriority <> '2-HIGH'::bpchar)) THEN 1 ELSE 0 END)
   Group Key: lineitem.l_shipmode
   ->  Nested Loop  (cost=0.00..100.00 rows=1000 width=8)
         Output: orders.o_orderpriority, lineitem.l_shipmode
         Join Filter: (orders.o_orderkey = lineitem.l_orderkey)
         ->  Seq Scan on public.orders  (cost=0.00..100.00 rows=1000 width=8)
               Output: orders.o_orderpriority, orders.o_orderkey
         ->  Seq Scan on public.lineitem  (cost=0.00..100.00 rows=1000 width=8)
               Output: lineitem.l_orderkey, lineitem.l_shipmode
               Filter: ((lineitem.l_shipmode = ANY ('{MAIL,SHIP}'::bpchar[])) AND (lineitem.l_commitdate < lineitem.l_receiptdate) AND (lineitem.l_shipdate < lineitem.l_commitdate) AND (lineitem.l_receiptdate >= '01-01-1994'::date) AND (lineitem.l_receiptdate < '01-01-1995'::date))
 Optimizer: PGP
(12 rows)

:query
 l_shipmode | high_line_count | low_line_count 
------------+-----------------+----------------
(0 rows)

set pg_planner.enable_planner to off;
explain verbose :query
                                                                                                                                                                                       QUERY PLAN                                                                                                                                                                                       
----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
 GroupAggregate  (cost=22.75..22.78 rows=1 width=60)
   Output: lineitem.l_shipmode, sum(CASE WHEN ((orders.o_orderpriority = '1-URGENT'::bpchar) OR (orders.o_orderpriority = '2-HIGH'::bpchar)) THEN 1 ELSE 0 END), sum(CASE WHEN ((orders.o_orderpriority <> '1-URGENT'::bpchar) AND (orders.o_orderpriority <> '2-HIGH'::bpchar)) THEN 1 ELSE 0 END)
   Group Key: lineitem.l_shipmode
   ->  Sort  (cost=22.75..22.75 rows=1 width=108)
         Output: lineitem.l_shipmode, orders.o_orderpriority
         Sort Key: lineitem.l_shipmode
         ->  Nested Loop  (cost=0.14..22.74 rows=1 width=108)
               Output: lineitem.l_shipmode, orders.o_orderpriority
               Inner Unique: true
               ->  Seq Scan on public.lineitem  (cost=0.00..14.50 rows=1 width=48)
                     Output: lineitem.l_orderkey, lineitem.l_partkey, lineitem.l_suppkey, lineitem.l_linenumber, lineitem.l_quantity, lineitem.l_extendedprice, lineitem.l_discount, lineitem.l_tax, lineitem.l_returnflag, lineitem.l_linestatus, lineitem.l_shipdate, lineitem.l_commitdate, lineitem.l_receiptdate, lineitem.l_shipinstruct, lineitem.l_shipmode, lineitem.l_comment
                     Filter: ((lineitem.l_shipmode = ANY ('{MAIL,SHIP}'::bpchar[])) AND (lineitem.l_commitdate < lineitem.l_receiptdate) AND (lineitem.l_shipdate < lineitem.l_commitdate) AND (lineitem.l_receiptdate >= '01-01-1994'::date) AND (lineitem.l_receiptdate < '01-01-1995'::date))
               ->  Index Scan using orders_pkey on public.orders  (cost=0.14..8.16 rows=1 width=68)
                     Output: orders.o_orderkey, orders.o_custkey, orders.o_orderstatus, orders.o_totalprice, orders.o_orderdate, orders.o_orderpriority, orders.o_clerk, orders.o_shippriority, orders.o_comment
                     Index Cond: (orders.o_orderkey = lineitem.l_orderkey)
(15 rows)

:query
 l_shipmode | high_line_count | low_line_count 
------------+-----------------+----------------
(0 rows)

