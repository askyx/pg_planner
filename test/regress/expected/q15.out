select query from tpch_queries(15); \gset
                                  query                                   
--------------------------------------------------------------------------
 SELECT                                                                  +
     s_suppkey,                                                          +
     s_name,                                                             +
     s_address,                                                          +
     s_phone,                                                            +
     total_revenue                                                       +
 FROM                                                                    +
     supplier,                                                           +
     (                                                                   +
         SELECT                                                          +
             l_suppkey AS supplier_no,                                   +
             sum(l_extendedprice * (1 - l_discount)) AS total_revenue    +
         FROM                                                            +
             lineitem                                                    +
         WHERE                                                           +
             l_shipdate >= CAST('1996-01-01' AS date)                    +
             AND l_shipdate < CAST('1996-04-01' AS date)                 +
         GROUP BY                                                        +
             supplier_no) revenue0                                       +
 WHERE                                                                   +
     s_suppkey = supplier_no                                             +
     AND total_revenue = (                                               +
         SELECT                                                          +
             max(total_revenue)                                          +
         FROM (                                                          +
             SELECT                                                      +
                 l_suppkey AS supplier_no,                               +
                 sum(l_extendedprice * (1 - l_discount)) AS total_revenue+
             FROM                                                        +
                 lineitem                                                +
             WHERE                                                       +
                 l_shipdate >= CAST('1996-01-01' AS date)                +
                 AND l_shipdate < CAST('1996-04-01' AS date)             +
             GROUP BY                                                    +
                 supplier_no) revenue1)                                  +
 ORDER BY                                                                +
     s_suppkey;                                                          +
 
(1 row)

select transform_query(query) from tpch_queries(15);
                                                         transform_query                                                         
---------------------------------------------------------------------------------------------------------------------------------
 LogicalApply: EXPR_SUBLINK                                                                                                     +
 ├── LogicalJoin: INNER                                                                                                         +
 │   ├── LogicalGet: supplier                                                                                                   +
 │   └── LogicalGbAgg: group: l_suppkey#9, agg: Pj(total_revenue sum((1760 l_extendedprice (1759 (1740 Constant) l_discount)))) +
 │       └── LogicalFilter: (AND ((1098 l_shipdate Constant),(1095 l_shipdate Constant)))                                       +
 │           └── LogicalGet: lineitem                                                                                           +
 └── LogicalGbAgg: group: , agg: Pj(max max(total_revenue))                                                                     +
     └── LogicalGbAgg: group: l_suppkey#26, agg: Pj(total_revenue sum((1760 l_extendedprice (1759 (1740 Constant) l_discount))))+
         └── LogicalFilter: (AND ((1098 l_shipdate Constant),(1095 l_shipdate Constant)))                                       +
             └── LogicalGet: lineitem                                                                                           +
 
(1 row)

set pg_planner.enable_planner to on;
explain verbose :query
                                                                             QUERY PLAN                                                                              
---------------------------------------------------------------------------------------------------------------------------------------------------------------------
 Result  (cost=0.00..0.00 rows=0 width=0)
   Output: supplier.s_suppkey, supplier.s_name, supplier.s_address, supplier.s_phone, (sum((lineitem.l_extendedprice * ("numeric"(1) - lineitem.l_discount))))
   Filter: ((sum((lineitem.l_extendedprice * ("numeric"(1) - lineitem.l_discount)))) = (SubPlan 1))
   ->  Nested Loop  (cost=0.00..100.00 rows=1000 width=8)
         Output: supplier.s_phone, supplier.s_address, (sum((lineitem.l_extendedprice * ("numeric"(1) - lineitem.l_discount)))), supplier.s_name, supplier.s_suppkey
         Join Filter: (supplier.s_suppkey = lineitem.l_suppkey)
         ->  Index Scan using supplier_pkey on public.supplier  (cost=0.00..100.00 rows=1000 width=8)
               Output: supplier.s_suppkey, supplier.s_name, supplier.s_address, supplier.s_phone
         ->  GroupAggregate  (cost=0.00..100.00 rows=1000 width=8)
               Output: lineitem.l_suppkey, sum((lineitem.l_extendedprice * ("numeric"(1) - lineitem.l_discount)))
               Group Key: lineitem.l_suppkey
               ->  Sort  (cost=0.00..100.00 rows=1000 width=8)
                     Output: lineitem.l_suppkey, lineitem.l_extendedprice, lineitem.l_discount
                     Sort Key: lineitem.l_suppkey COLLATE "default"
                     ->  Seq Scan on public.lineitem  (cost=0.00..100.00 rows=1000 width=8)
                           Output: lineitem.l_suppkey, lineitem.l_extendedprice, lineitem.l_discount
                           Filter: ((lineitem.l_shipdate >= '01-01-1996'::date) AND (lineitem.l_shipdate < '04-01-1996'::date))
   SubPlan 1
     ->  Aggregate  (cost=0.00..100.00 rows=1000 width=8)
           Output: max((sum((lineitem_1.l_extendedprice * ("numeric"(1) - lineitem_1.l_discount)))))
           ->  GroupAggregate  (cost=0.00..100.00 rows=1000 width=8)
                 Output: sum((lineitem_1.l_extendedprice * ("numeric"(1) - lineitem_1.l_discount)))
                 Group Key: lineitem_1.l_suppkey
                 ->  Sort  (cost=0.00..100.00 rows=1000 width=8)
                       Output: lineitem_1.l_suppkey, lineitem_1.l_extendedprice, lineitem_1.l_discount
                       Sort Key: lineitem_1.l_suppkey COLLATE "default"
                       ->  Seq Scan on public.lineitem lineitem_1  (cost=0.00..100.00 rows=1000 width=8)
                             Output: lineitem_1.l_suppkey, lineitem_1.l_extendedprice, lineitem_1.l_discount
                             Filter: ((lineitem_1.l_shipdate >= '01-01-1996'::date) AND (lineitem_1.l_shipdate < '04-01-1996'::date))
 Optimizer: PGP
(30 rows)

:query
 s_suppkey | s_name | s_address | s_phone | total_revenue 
-----------+--------+-----------+---------+---------------
(0 rows)

set pg_planner.enable_planner to off;
explain verbose :query
                                                                          QUERY PLAN                                                                           
---------------------------------------------------------------------------------------------------------------------------------------------------------------
 Nested Loop  (cost=16.54..24.71 rows=1 width=302)
   Output: supplier.s_suppkey, supplier.s_name, supplier.s_address, supplier.s_phone, (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))))
   Inner Unique: true
   InitPlan 1
     ->  Aggregate  (cost=8.21..8.22 rows=1 width=32)
           Output: max((sum((lineitem_1.l_extendedprice * ('1'::numeric - lineitem_1.l_discount)))))
           ->  GroupAggregate  (cost=8.17..8.20 rows=1 width=36)
                 Output: lineitem_1.l_suppkey, sum((lineitem_1.l_extendedprice * ('1'::numeric - lineitem_1.l_discount)))
                 Group Key: lineitem_1.l_suppkey
                 ->  Sort  (cost=8.17..8.18 rows=1 width=40)
                       Output: lineitem_1.l_suppkey, lineitem_1.l_extendedprice, lineitem_1.l_discount
                       Sort Key: lineitem_1.l_suppkey
                       ->  Index Scan using idx_lineitem_shipdate on public.lineitem lineitem_1  (cost=0.14..8.16 rows=1 width=40)
                             Output: lineitem_1.l_suppkey, lineitem_1.l_extendedprice, lineitem_1.l_discount
                             Index Cond: ((lineitem_1.l_shipdate >= '01-01-1996'::date) AND (lineitem_1.l_shipdate < '04-01-1996'::date))
   ->  GroupAggregate  (cost=8.17..8.20 rows=1 width=36)
         Output: lineitem.l_suppkey, sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount)))
         Group Key: lineitem.l_suppkey
         Filter: (sum((lineitem.l_extendedprice * ('1'::numeric - lineitem.l_discount))) = (InitPlan 1).col1)
         ->  Sort  (cost=8.17..8.18 rows=1 width=40)
               Output: lineitem.l_suppkey, lineitem.l_extendedprice, lineitem.l_discount
               Sort Key: lineitem.l_suppkey
               ->  Index Scan using idx_lineitem_shipdate on public.lineitem  (cost=0.14..8.16 rows=1 width=40)
                     Output: lineitem.l_suppkey, lineitem.l_extendedprice, lineitem.l_discount
                     Index Cond: ((lineitem.l_shipdate >= '01-01-1996'::date) AND (lineitem.l_shipdate < '04-01-1996'::date))
   ->  Index Scan using supplier_pkey on public.supplier  (cost=0.14..8.16 rows=1 width=270)
         Output: supplier.s_suppkey, supplier.s_name, supplier.s_address, supplier.s_nationkey, supplier.s_phone, supplier.s_acctbal, supplier.s_comment
         Index Cond: (supplier.s_suppkey = lineitem.l_suppkey)
(28 rows)

:query
 s_suppkey | s_name | s_address | s_phone | total_revenue 
-----------+--------+-----------+---------+---------------
(0 rows)

