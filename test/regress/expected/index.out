----------------------------
-- test for btree index
----------------------------
drop table if exists t1;
NOTICE:  table "t1" does not exist, skipping
create table t1 (a int, b int, c int);
create index idx on t1 (a);                 -- eq to (a asc nulls last);
create index idx_asc_1 on t1 (a asc);       -- eq to (a asc nulls last);
create index idx_asc_2 on t1 (a asc nulls first);
create index idx_asc_3 on t1 (a asc nulls last) include (b);
create index idx_desc_1 on t1 (a desc);      -- eq to (a desc nulls first);
create index idx_desc_2 on t1 (a desc nulls first);
create index idx_desc_3 on t1 (a desc nulls last) include (c);
create index idx_asc_nulls_first on t1 (a nulls first) include(c,b); -- eq to (a asc nulls first);
create index idx_asc_nulls_last on t1 (a nulls last);                -- eq to (a asc nulls last);
\d+ t1
                                    Table "public.t1"
 Column |  Type   | Collation | Nullable | Default | Storage | Stats target | Description 
--------+---------+-----------+----------+---------+---------+--------------+-------------
 a      | integer |           |          |         | plain   |              | 
 b      | integer |           |          |         | plain   |              | 
 c      | integer |           |          |         | plain   |              | 
Indexes:
    "idx" btree (a)
    "idx_asc_1" btree (a)
    "idx_asc_2" btree (a NULLS FIRST)
    "idx_asc_3" btree (a) INCLUDE (b)
    "idx_asc_nulls_first" btree (a NULLS FIRST) INCLUDE (c, b)
    "idx_asc_nulls_last" btree (a)
    "idx_desc_1" btree (a DESC)
    "idx_desc_2" btree (a DESC)
    "idx_desc_3" btree (a DESC NULLS LAST) INCLUDE (c)

insert into t1 values (1, 2, 3), (null, 5, 6), (7, 8, 9);
insert into t1 values (null, 11, 12), (13, 14, 15), (null, 17, 18);
set pg_planner.enable_planner to on;
-- ~(idx | idx_asc_1 | idx_asc_3 | idx_asc_nulls_last)
explain select * from t1 order by a;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Scan using idx on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

-- ~(idx_desc_1 | idx_desc_2) 
explain select * from t1 order by a desc;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Index Scan using idx_desc_1 on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

-- ~(idx_desc_1 | idx_desc_2) 
explain select * from t1 order by a desc nulls first;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Index Scan using idx_desc_1 on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

explain select * from t1 order by a desc nulls last;
                                QUERY PLAN                                
--------------------------------------------------------------------------
 Index Scan using idx_desc_3 on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

explain select * from t1 order by a asc;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Scan using idx on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

explain select * from t1 order by a asc nulls first;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Index Scan using idx_asc_2 on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

explain select * from t1 order by a asc nulls last;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Scan using idx on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

explain select * from t1 order by a nulls first;
                               QUERY PLAN                                
-------------------------------------------------------------------------
 Index Scan using idx_asc_2 on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

explain select * from t1 order by a nulls last;
                            QUERY PLAN                             
-------------------------------------------------------------------
 Index Scan using idx on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

select * from t1 order by a;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

select * from t1 order by a desc;
 a  | b  | c  
----+----+----
    |  5 |  6
    | 11 | 12
    | 17 | 18
 13 | 14 | 15
  7 |  8 |  9
  1 |  2 |  3
(6 rows)

select * from t1 order by a desc nulls first;
 a  | b  | c  
----+----+----
    |  5 |  6
    | 11 | 12
    | 17 | 18
 13 | 14 | 15
  7 |  8 |  9
  1 |  2 |  3
(6 rows)

select * from t1 order by a desc nulls last;
 a  | b  | c  
----+----+----
 13 | 14 | 15
  7 |  8 |  9
  1 |  2 |  3
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

select * from t1 order by a asc;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

select * from t1 order by a asc nulls first;
 a  | b  | c  
----+----+----
    |  5 |  6
    | 11 | 12
    | 17 | 18
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
(6 rows)

select * from t1 order by a asc nulls last;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

select * from t1 order by a nulls first;
 a  | b  | c  
----+----+----
    |  5 |  6
    | 11 | 12
    | 17 | 18
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
(6 rows)

select * from t1 order by a nulls last;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

set pg_planner.enable_planner to off;
-- ~(idx | idx_asc_1 | idx_asc_3 | idx_asc_nulls_last)
explain select * from t1 order by a;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Index Scan using idx_asc_nulls_last on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

-- ~(idx_desc_1 | idx_desc_2) 
explain select * from t1 order by a desc;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Index Scan Backward using idx_asc_nulls_last on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

-- ~(idx_desc_1 | idx_desc_2) 
explain select * from t1 order by a desc nulls first;
                                        QUERY PLAN                                         
-------------------------------------------------------------------------------------------
 Index Scan Backward using idx_asc_nulls_last on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

explain select * from t1 order by a desc nulls last;
                                           QUERY PLAN                                            
-------------------------------------------------------------------------------------------------
 Index Only Scan Backward using idx_asc_nulls_first on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

explain select * from t1 order by a asc;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Index Scan using idx_asc_nulls_last on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

explain select * from t1 order by a asc nulls first;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Index Only Scan using idx_asc_nulls_first on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

explain select * from t1 order by a asc nulls last;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Index Scan using idx_asc_nulls_last on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

explain select * from t1 order by a nulls first;
                                       QUERY PLAN                                       
----------------------------------------------------------------------------------------
 Index Only Scan using idx_asc_nulls_first on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

explain select * from t1 order by a nulls last;
                                    QUERY PLAN                                    
----------------------------------------------------------------------------------
 Index Scan using idx_asc_nulls_last on t1  (cost=0.15..78.75 rows=2040 width=12)
(1 row)

select * from t1 order by a;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

select * from t1 order by a desc;
 a  | b  | c  
----+----+----
    | 17 | 18
    | 11 | 12
    |  5 |  6
 13 | 14 | 15
  7 |  8 |  9
  1 |  2 |  3
(6 rows)

select * from t1 order by a desc nulls first;
 a  | b  | c  
----+----+----
    | 17 | 18
    | 11 | 12
    |  5 |  6
 13 | 14 | 15
  7 |  8 |  9
  1 |  2 |  3
(6 rows)

select * from t1 order by a desc nulls last;
 a  | b  | c  
----+----+----
 13 | 14 | 15
  7 |  8 |  9
  1 |  2 |  3
    | 17 | 18
    | 11 | 12
    |  5 |  6
(6 rows)

select * from t1 order by a asc;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

select * from t1 order by a asc nulls first;
 a  | b  | c  
----+----+----
    |  5 |  6
    | 11 | 12
    | 17 | 18
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
(6 rows)

select * from t1 order by a asc nulls last;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

select * from t1 order by a nulls first;
 a  | b  | c  
----+----+----
    |  5 |  6
    | 11 | 12
    | 17 | 18
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
(6 rows)

select * from t1 order by a nulls last;
 a  | b  | c  
----+----+----
  1 |  2 |  3
  7 |  8 |  9
 13 | 14 | 15
    |  5 |  6
    | 11 | 12
    | 17 | 18
(6 rows)

drop table if exists t1;
create table t1 (a int, b int, c int, d int, e boolean);
create index idxx1 on t1 (a, b);
create index idxx2 on t1 (e);
insert into t1 values (1, 2, 3, 4, true), (5, 6, 7, 8, false), (9, 10, 11, 12, true), (13, 14, 15, 16, false);
-- index scan
explain select * from t1 where a = 1 and b = 2;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.15..8.17 rows=1 width=17)
   Index Cond: ((a = 1) AND (b = 2))
(2 rows)

-- index scan
explain select * from t1 order by a;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.15..75.30 rows=1810 width=17)
(1 row)

explain select * from t1 order by a, b;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.15..75.30 rows=1810 width=17)
(1 row)

-- Incremental sort
explain select * from t1 order by a, b, c;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Incremental Sort  (cost=0.67..130.69 rows=1810 width=17)
   Sort Key: a, b, c
   Presorted Key: a, b
   ->  Index Scan using idxx1 on t1  (cost=0.15..75.30 rows=1810 width=17)
(4 rows)

-- not index scan
explain select * from t1 order by b, a;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort  (cost=126.04..130.56 rows=1810 width=17)
   Sort Key: b, a
   ->  Seq Scan on t1  (cost=0.00..28.10 rows=1810 width=17)
(3 rows)

explain select * from t1 order by b;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort  (cost=126.04..130.56 rows=1810 width=17)
   Sort Key: b
   ->  Seq Scan on t1  (cost=0.00..28.10 rows=1810 width=17)
(3 rows)

explain select * from t1 where a = 1 and b = 2 order by a, b;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.15..8.17 rows=1 width=17)
   Index Cond: ((a = 1) AND (b = 2))
(2 rows)

explain select * from t1 where a = 1 and b = 2 order by b, a;
                           QUERY PLAN                            
-----------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.15..8.17 rows=1 width=17)
   Index Cond: ((a = 1) AND (b = 2))
(2 rows)

explain select * from t1 where e;
                      QUERY PLAN                      
------------------------------------------------------
 Seq Scan on t1  (cost=0.00..28.10 rows=905 width=17)
   Filter: e
(2 rows)

-- index scan
select * from t1 where a = 1 and b = 2;
 a | b | c | d | e 
---+---+---+---+---
 1 | 2 | 3 | 4 | t
(1 row)

-- index scan
select * from t1 order by a;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

select * from t1 order by a, b;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

-- Incremental sort
select * from t1 order by a, b, c;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

-- not index scan
select * from t1 order by b, a;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

select * from t1 order by b;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

select * from t1 where a = 1 and b = 2 order by a, b;
 a | b | c | d | e 
---+---+---+---+---
 1 | 2 | 3 | 4 | t
(1 row)

select * from t1 where a = 1 and b = 2 order by b, a;
 a | b | c | d | e 
---+---+---+---+---
 1 | 2 | 3 | 4 | t
(1 row)

select * from t1 where e;
 a | b  | c  | d  | e 
---+----+----+----+---
 1 |  2 |  3 |  4 | t
 9 | 10 | 11 | 12 | t
(2 rows)

set pg_planner.enable_planner to on;
-- index scan
explain select * from t1 where a = 1 and b = 2;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.00..100.00 rows=1000 width=8)
   Index Cond: ((a = 1) AND (b = 2))
 Optimizer: PGP
(3 rows)

-- index scan
explain select * from t1 order by a;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort  (cost=0.00..100.00 rows=1000 width=8)
   Sort Key: a COLLATE "default"
   ->  Seq Scan on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(4 rows)

explain select * from t1 order by a, b;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(2 rows)

-- Incremental sort
explain select * from t1 order by a, b, c;
                                QUERY PLAN                                 
---------------------------------------------------------------------------
 Sort  (cost=0.00..100.00 rows=1000 width=8)
   Sort Key: a COLLATE "default", b COLLATE "default", c COLLATE "default"
   ->  Seq Scan on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(4 rows)

-- not index scan
explain select * from t1 order by b, a;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort  (cost=0.00..100.00 rows=1000 width=8)
   Sort Key: b COLLATE "default", a COLLATE "default"
   ->  Seq Scan on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(4 rows)

explain select * from t1 order by b;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort  (cost=0.00..100.00 rows=1000 width=8)
   Sort Key: b COLLATE "default"
   ->  Seq Scan on t1  (cost=0.00..100.00 rows=1000 width=8)
 Optimizer: PGP
(4 rows)

explain select * from t1 where a = 1 and b = 2 order by a, b;
                             QUERY PLAN                              
---------------------------------------------------------------------
 Index Scan using idxx1 on t1  (cost=0.00..100.00 rows=1000 width=8)
   Index Cond: ((a = 1) AND (b = 2))
 Optimizer: PGP
(3 rows)

explain select * from t1 where a = 1 and b = 2 order by b, a;
                         QUERY PLAN                          
-------------------------------------------------------------
 Sort  (cost=0.00..100.00 rows=1000 width=8)
   Sort Key: b COLLATE "default", a COLLATE "default"
   ->  Seq Scan on t1  (cost=0.00..100.00 rows=1000 width=8)
         Filter: ((a = 1) AND (b = 2))
 Optimizer: PGP
(5 rows)

explain select * from t1 where e;
WARNING:  TODO: support boolean type index scan
                      QUERY PLAN                      
------------------------------------------------------
 Seq Scan on t1  (cost=0.00..28.10 rows=905 width=17)
   Filter: e
(2 rows)

-- index scan
select * from t1 where a = 1 and b = 2;
 a | b | c | d | e 
---+---+---+---+---
 1 | 2 | 3 | 4 | t
(1 row)

-- index scan
select * from t1 order by a;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

select * from t1 order by a, b;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

-- Incremental sort
select * from t1 order by a, b, c;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

-- not index scan
select * from t1 order by b, a;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

select * from t1 order by b;
 a  | b  | c  | d  | e 
----+----+----+----+---
  1 |  2 |  3 |  4 | t
  5 |  6 |  7 |  8 | f
  9 | 10 | 11 | 12 | t
 13 | 14 | 15 | 16 | f
(4 rows)

select * from t1 where a = 1 and b = 2 order by a, b;
 a | b | c | d | e 
---+---+---+---+---
 1 | 2 | 3 | 4 | t
(1 row)

select * from t1 where a = 1 and b = 2 order by b, a;
 a | b | c | d | e 
---+---+---+---+---
 1 | 2 | 3 | 4 | t
(1 row)

select * from t1 where e;
WARNING:  TODO: support boolean type index scan
 a | b  | c  | d  | e 
---+----+----+----+---
 1 |  2 |  3 |  4 | t
 9 | 10 | 11 | 12 | t
(2 rows)

